// <auto-generated/>
#nullable enable

namespace Demo.GraphQL
{
    /// <summary>
    /// Query root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_informationResult : global::System.IEquatable<Contact_informationResult>, IContact_informationResult
    {
        public Contact_informationResult(global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts?>? contacts)
        {
            Contacts = contacts;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts?>? Contacts { get; }

        public virtual global::System.Boolean Equals(Contact_informationResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Contacts, other.Contacts));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_informationResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Contacts != null)
                {
                    foreach (var Contacts_elm in Contacts)
                    {
                        if (Contacts_elm != null)
                        {
                            hash ^= 397 * Contacts_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Contact : global::System.IEquatable<Contact_information_Contacts_Contact>, IContact_information_Contacts_Contact
    {
        public Contact_information_Contacts_Contact(global::System.String? contactId, global::System.String? name, global::Demo.GraphQL.IContact_information_Contacts_TaxCountry? taxCountry, global::Demo.GraphQL.IContact_information_Contacts_Juridical? juridical, global::Demo.GraphQL.IContact_information_Contacts_Classification? classification, global::Demo.GraphQL.IContact_information_Contacts_Identity? identity, global::System.String? type, global::Demo.GraphQL.IContact_information_Contacts_Profile? profile, global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios?>? portfolios)
        {
            ContactId = contactId;
            Name = name;
            TaxCountry = taxCountry;
            Juridical = juridical;
            Classification = classification;
            Identity = identity;
            Type = type;
            Profile = profile;
            Portfolios = portfolios;
        }

        public global::System.String? ContactId { get; }

        public global::System.String? Name { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_TaxCountry? TaxCountry { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Juridical? Juridical { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Classification? Classification { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Identity? Identity { get; }

        public global::System.String? Type { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Profile? Profile { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios?>? Portfolios { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Contact? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ContactId is null && other.ContactId is null) || ContactId != null && ContactId.Equals(other.ContactId))) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((TaxCountry is null && other.TaxCountry is null) || TaxCountry != null && TaxCountry.Equals(other.TaxCountry)) && ((Juridical is null && other.Juridical is null) || Juridical != null && Juridical.Equals(other.Juridical)) && ((Classification is null && other.Classification is null) || Classification != null && Classification.Equals(other.Classification)) && ((Identity is null && other.Identity is null) || Identity != null && Identity.Equals(other.Identity)) && ((Type is null && other.Type is null) || Type != null && Type.Equals(other.Type)) && ((Profile is null && other.Profile is null) || Profile != null && Profile.Equals(other.Profile)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Portfolios, other.Portfolios);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Contact)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ContactId != null)
                {
                    hash ^= 397 * ContactId.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (TaxCountry != null)
                {
                    hash ^= 397 * TaxCountry.GetHashCode();
                }

                if (Juridical != null)
                {
                    hash ^= 397 * Juridical.GetHashCode();
                }

                if (Classification != null)
                {
                    hash ^= 397 * Classification.GetHashCode();
                }

                if (Identity != null)
                {
                    hash ^= 397 * Identity.GetHashCode();
                }

                if (Type != null)
                {
                    hash ^= 397 * Type.GetHashCode();
                }

                if (Profile != null)
                {
                    hash ^= 397 * Profile.GetHashCode();
                }

                if (Portfolios != null)
                {
                    foreach (var Portfolios_elm in Portfolios)
                    {
                        if (Portfolios_elm != null)
                        {
                            hash ^= 397 * Portfolios_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_TaxCountry_Country : global::System.IEquatable<Contact_information_Contacts_TaxCountry_Country>, IContact_information_Contacts_TaxCountry_Country
    {
        public Contact_information_Contacts_TaxCountry_Country(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_TaxCountry_Country? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_TaxCountry_Country)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Juridical_Juridical : global::System.IEquatable<Contact_information_Contacts_Juridical_Juridical>, IContact_information_Contacts_Juridical_Juridical
    {
        public Contact_information_Contacts_Juridical_Juridical(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Juridical_Juridical? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Juridical_Juridical)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Classification_Classification : global::System.IEquatable<Contact_information_Contacts_Classification_Classification>, IContact_information_Contacts_Classification_Classification
    {
        public Contact_information_Contacts_Classification_Classification(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Classification_Classification? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Classification_Classification)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Identity_Identity : global::System.IEquatable<Contact_information_Contacts_Identity_Identity>, IContact_information_Contacts_Identity_Identity
    {
        public Contact_information_Contacts_Identity_Identity(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Identity_Identity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Identity_Identity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Profile_Profile2 : global::System.IEquatable<Contact_information_Contacts_Profile_Profile2>, IContact_information_Contacts_Profile_Profile2
    {
        public Contact_information_Contacts_Profile_Profile2(global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes?>? attributes)
        {
            Attributes = attributes;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes?>? Attributes { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Profile_Profile2? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Attributes, other.Attributes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Profile_Profile2)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Attributes != null)
                {
                    foreach (var Attributes_elm in Attributes)
                    {
                        if (Attributes_elm != null)
                        {
                            hash ^= 397 * Attributes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_Portfolio : global::System.IEquatable<Contact_information_Contacts_Portfolios_Portfolio>, IContact_information_Contacts_Portfolios_Portfolio
    {
        public Contact_information_Contacts_Portfolios_Portfolio(global::System.Int64? id, global::System.String? name, global::System.String? shortName, global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts?>? accounts, global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport? portfolioReport)
        {
            Id = id;
            Name = name;
            ShortName = shortName;
            Accounts = accounts;
            PortfolioReport = portfolioReport;
        }

        public global::System.Int64? Id { get; }

        public global::System.String? Name { get; }

        public global::System.String? ShortName { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts?>? Accounts { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport? PortfolioReport { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Portfolios_Portfolio? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((ShortName is null && other.ShortName is null) || ShortName != null && ShortName.Equals(other.ShortName)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Accounts, other.Accounts) && ((PortfolioReport is null && other.PortfolioReport is null) || PortfolioReport != null && PortfolioReport.Equals(other.PortfolioReport));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Portfolios_Portfolio)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (ShortName != null)
                {
                    hash ^= 397 * ShortName.GetHashCode();
                }

                if (Accounts != null)
                {
                    foreach (var Accounts_elm in Accounts)
                    {
                        if (Accounts_elm != null)
                        {
                            hash ^= 397 * Accounts_elm.GetHashCode();
                        }
                    }
                }

                if (PortfolioReport != null)
                {
                    hash ^= 397 * PortfolioReport.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Profile_Attributes_ProfileAttribute2 : global::System.IEquatable<Contact_information_Contacts_Profile_Attributes_ProfileAttribute2>, IContact_information_Contacts_Profile_Attributes_ProfileAttribute2
    {
        public Contact_information_Contacts_Profile_Attributes_ProfileAttribute2(global::System.String? attributeKey, global::System.Int64? id, global::System.String? stringValue)
        {
            AttributeKey = attributeKey;
            Id = id;
            StringValue = stringValue;
        }

        public global::System.String? AttributeKey { get; }

        public global::System.Int64? Id { get; }

        public global::System.String? StringValue { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Profile_Attributes_ProfileAttribute2? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AttributeKey is null && other.AttributeKey is null) || AttributeKey != null && AttributeKey.Equals(other.AttributeKey))) && Id == other.Id && ((StringValue is null && other.StringValue is null) || StringValue != null && StringValue.Equals(other.StringValue));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Profile_Attributes_ProfileAttribute2)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AttributeKey != null)
                {
                    hash ^= 397 * AttributeKey.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (StringValue != null)
                {
                    hash ^= 397 * StringValue.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_Accounts_Account : global::System.IEquatable<Contact_information_Contacts_Portfolios_Accounts_Account>, IContact_information_Contacts_Portfolios_Accounts_Account
    {
        public Contact_information_Contacts_Portfolios_Accounts_Account(global::System.String? name, global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts_Currency? currency, global::System.String? bic)
        {
            Name = name;
            Currency = currency;
            Bic = bic;
        }

        public global::System.String? Name { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts_Currency? Currency { get; }

        public global::System.String? Bic { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Portfolios_Accounts_Account? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Currency is null && other.Currency is null) || Currency != null && Currency.Equals(other.Currency)) && ((Bic is null && other.Bic is null) || Bic != null && Bic.Equals(other.Bic));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Portfolios_Accounts_Account)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Currency != null)
                {
                    hash ^= 397 * Currency.GetHashCode();
                }

                if (Bic != null)
                {
                    hash ^= 397 * Bic.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport : global::System.IEquatable<Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport>, IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport
    {
        public Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport(global::System.Double accountBalance, global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>? portfolioReportItems)
        {
            AccountBalance = accountBalance;
            PortfolioReportItems = portfolioReportItems;
        }

        public global::System.Double AccountBalance { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>? PortfolioReportItems { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AccountBalance == other.AccountBalance) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(PortfolioReportItems, other.PortfolioReportItems);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AccountBalance.GetHashCode();
                if (PortfolioReportItems != null)
                {
                    foreach (var PortfolioReportItems_elm in PortfolioReportItems)
                    {
                        if (PortfolioReportItems_elm != null)
                        {
                            hash ^= 397 * PortfolioReportItems_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_Accounts_Currency_Security : global::System.IEquatable<Contact_information_Contacts_Portfolios_Accounts_Currency_Security>, IContact_information_Contacts_Portfolios_Accounts_Currency_Security
    {
        public Contact_information_Contacts_Portfolios_Accounts_Currency_Security(global::System.String? name)
        {
            Name = name;
        }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Portfolios_Accounts_Currency_Security? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Portfolios_Accounts_Currency_Security)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem : global::System.IEquatable<Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem>, IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem
    {
        public Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem(global::System.String? securityName, global::System.Double exposure, global::System.Double marketValue, global::System.Double amount, global::System.Double valueChangeRelative)
        {
            SecurityName = securityName;
            Exposure = exposure;
            MarketValue = marketValue;
            Amount = amount;
            ValueChangeRelative = valueChangeRelative;
        }

        public global::System.String? SecurityName { get; }

        public global::System.Double Exposure { get; }

        public global::System.Double MarketValue { get; }

        public global::System.Double Amount { get; }

        public global::System.Double ValueChangeRelative { get; }

        public virtual global::System.Boolean Equals(Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SecurityName is null && other.SecurityName is null) || SecurityName != null && SecurityName.Equals(other.SecurityName))) && Exposure == other.Exposure && MarketValue == other.MarketValue && Amount == other.Amount && ValueChangeRelative == other.ValueChangeRelative;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SecurityName != null)
                {
                    hash ^= 397 * SecurityName.GetHashCode();
                }

                hash ^= 397 * Exposure.GetHashCode();
                hash ^= 397 * MarketValue.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * ValueChangeRelative.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Query root
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_informationResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts?>? Contacts { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts
    {
        public global::System.String? ContactId { get; }

        public global::System.String? Name { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_TaxCountry? TaxCountry { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Juridical? Juridical { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Classification? Classification { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Identity? Identity { get; }

        public global::System.String? Type { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Profile? Profile { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios?>? Portfolios { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Contact : IContact_information_Contacts
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_TaxCountry
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_TaxCountry_Country : IContact_information_Contacts_TaxCountry
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Juridical
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Juridical_Juridical : IContact_information_Contacts_Juridical
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Classification
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Classification_Classification : IContact_information_Contacts_Classification
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Identity
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Identity_Identity : IContact_information_Contacts_Identity
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Profile
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes?>? Attributes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Profile_Profile2 : IContact_information_Contacts_Profile
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios
    {
        public global::System.Int64? Id { get; }

        public global::System.String? Name { get; }

        public global::System.String? ShortName { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts?>? Accounts { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport? PortfolioReport { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_Portfolio : IContact_information_Contacts_Portfolios
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Profile_Attributes
    {
        public global::System.String? AttributeKey { get; }

        public global::System.Int64? Id { get; }

        public global::System.String? StringValue { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Profile_Attributes_ProfileAttribute2 : IContact_information_Contacts_Profile_Attributes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_Accounts
    {
        public global::System.String? Name { get; }

        public global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts_Currency? Currency { get; }

        public global::System.String? Bic { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_Accounts_Account : IContact_information_Contacts_Portfolios_Accounts
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_PortfolioReport
    {
        public global::System.Double AccountBalance { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>? PortfolioReportItems { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport : IContact_information_Contacts_Portfolios_PortfolioReport
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_Accounts_Currency
    {
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_Accounts_Currency_Security : IContact_information_Contacts_Portfolios_Accounts_Currency
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems
    {
        public global::System.String? SecurityName { get; }

        public global::System.Double Exposure { get; }

        public global::System.Double MarketValue { get; }

        public global::System.Double Amount { get; }

        public global::System.Double ValueChangeRelative { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem : IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems
    {
    }

    /// <summary>
    /// Represents the operation service of the Contact_information GraphQL operation
    /// <code>
    /// query Contact_information($id: String) {
    ///   contacts(contactId: $id) {
    ///     __typename
    ///     contactId
    ///     name
    ///     taxCountry {
    ///       __typename
    ///       name
    ///       ... on Country {
    ///         id
    ///       }
    ///     }
    ///     juridical {
    ///       __typename
    ///       name
    ///       ... on Juridical {
    ///         id
    ///       }
    ///     }
    ///     classification {
    ///       __typename
    ///       name
    ///       ... on Classification {
    ///         id
    ///       }
    ///     }
    ///     identity {
    ///       __typename
    ///       name
    ///       ... on Identity {
    ///         id
    ///       }
    ///     }
    ///     type
    ///     profile {
    ///       __typename
    ///       attributes {
    ///         __typename
    ///         attributeKey
    ///         id
    ///         stringValue
    ///         ... on ProfileAttribute2 {
    ///           id
    ///         }
    ///       }
    ///       ... on Profile2 {
    ///         id
    ///       }
    ///     }
    ///     portfolios {
    ///       __typename
    ///       id
    ///       name
    ///       shortName
    ///       accounts {
    ///         __typename
    ///         name
    ///         currency {
    ///           __typename
    ///           name
    ///           ... on Security {
    ///             id
    ///           }
    ///         }
    ///         bic
    ///         ... on Account {
    ///           id
    ///         }
    ///       }
    ///       portfolioReport {
    ///         __typename
    ///         accountBalance
    ///         portfolioReportItems {
    ///           __typename
    ///           securityName
    ///           exposure
    ///           marketValue
    ///           amount
    ///           valueChangeRelative
    ///           ... on PortfolioReportItem {
    ///             id
    ///           }
    ///         }
    ///         ... on PortfolioReport {
    ///           id
    ///         }
    ///       }
    ///       ... on Portfolio {
    ///         id
    ///       }
    ///     }
    ///     ... on Contact {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_informationQueryDocument : global::StrawberryShake.IDocument
    {
        private Contact_informationQueryDocument()
        {
        }

        public static Contact_informationQueryDocument Instance { get; } = new Contact_informationQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x28, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6a, 0x75, 0x72, 0x69, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4a, 0x75, 0x72, 0x69, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x20, 0x69, 0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x32, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x62, 0x69, 0x63, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d0c43a921de17227276ff108f2e03d76");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Contact_information GraphQL operation
    /// <code>
    /// query Contact_information($id: String) {
    ///   contacts(contactId: $id) {
    ///     __typename
    ///     contactId
    ///     name
    ///     taxCountry {
    ///       __typename
    ///       name
    ///       ... on Country {
    ///         id
    ///       }
    ///     }
    ///     juridical {
    ///       __typename
    ///       name
    ///       ... on Juridical {
    ///         id
    ///       }
    ///     }
    ///     classification {
    ///       __typename
    ///       name
    ///       ... on Classification {
    ///         id
    ///       }
    ///     }
    ///     identity {
    ///       __typename
    ///       name
    ///       ... on Identity {
    ///         id
    ///       }
    ///     }
    ///     type
    ///     profile {
    ///       __typename
    ///       attributes {
    ///         __typename
    ///         attributeKey
    ///         id
    ///         stringValue
    ///         ... on ProfileAttribute2 {
    ///           id
    ///         }
    ///       }
    ///       ... on Profile2 {
    ///         id
    ///       }
    ///     }
    ///     portfolios {
    ///       __typename
    ///       id
    ///       name
    ///       shortName
    ///       accounts {
    ///         __typename
    ///         name
    ///         currency {
    ///           __typename
    ///           name
    ///           ... on Security {
    ///             id
    ///           }
    ///         }
    ///         bic
    ///         ... on Account {
    ///           id
    ///         }
    ///       }
    ///       portfolioReport {
    ///         __typename
    ///         accountBalance
    ///         portfolioReportItems {
    ///           __typename
    ///           securityName
    ///           exposure
    ///           marketValue
    ///           amount
    ///           valueChangeRelative
    ///           ... on PortfolioReportItem {
    ///             id
    ///           }
    ///         }
    ///         ... on PortfolioReport {
    ///           id
    ///         }
    ///       }
    ///       ... on Portfolio {
    ///         id
    ///       }
    ///     }
    ///     ... on Contact {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_informationQuery : global::Demo.GraphQL.IContact_informationQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IContact_informationResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public Contact_informationQuery(global::StrawberryShake.IOperationExecutor<IContact_informationResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IContact_informationResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IContact_informationResult>> ExecuteAsync(global::System.String? id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IContact_informationResult>> Watch(global::System.String? id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: Contact_informationQueryDocument.Instance.Hash.Value, name: "Contact_information", document: Contact_informationQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the Contact_information GraphQL operation
    /// <code>
    /// query Contact_information($id: String) {
    ///   contacts(contactId: $id) {
    ///     __typename
    ///     contactId
    ///     name
    ///     taxCountry {
    ///       __typename
    ///       name
    ///       ... on Country {
    ///         id
    ///       }
    ///     }
    ///     juridical {
    ///       __typename
    ///       name
    ///       ... on Juridical {
    ///         id
    ///       }
    ///     }
    ///     classification {
    ///       __typename
    ///       name
    ///       ... on Classification {
    ///         id
    ///       }
    ///     }
    ///     identity {
    ///       __typename
    ///       name
    ///       ... on Identity {
    ///         id
    ///       }
    ///     }
    ///     type
    ///     profile {
    ///       __typename
    ///       attributes {
    ///         __typename
    ///         attributeKey
    ///         id
    ///         stringValue
    ///         ... on ProfileAttribute2 {
    ///           id
    ///         }
    ///       }
    ///       ... on Profile2 {
    ///         id
    ///       }
    ///     }
    ///     portfolios {
    ///       __typename
    ///       id
    ///       name
    ///       shortName
    ///       accounts {
    ///         __typename
    ///         name
    ///         currency {
    ///           __typename
    ///           name
    ///           ... on Security {
    ///             id
    ///           }
    ///         }
    ///         bic
    ///         ... on Account {
    ///           id
    ///         }
    ///       }
    ///       portfolioReport {
    ///         __typename
    ///         accountBalance
    ///         portfolioReportItems {
    ///           __typename
    ///           securityName
    ///           exposure
    ///           marketValue
    ///           amount
    ///           valueChangeRelative
    ///           ... on PortfolioReportItem {
    ///             id
    ///           }
    ///         }
    ///         ... on PortfolioReport {
    ///           id
    ///         }
    ///       }
    ///       ... on Portfolio {
    ///         id
    ///       }
    ///     }
    ///     ... on Contact {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface IContact_informationQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IContact_informationResult>> ExecuteAsync(global::System.String? id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IContact_informationResult>> Watch(global::System.String? id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CitroneerGraphQlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CitroneerGraphQlClient : global::Demo.GraphQL.ICitroneerGraphQlClient
    {
        private readonly global::Demo.GraphQL.IContact_informationQuery _contact_Information;
        public CitroneerGraphQlClient(global::Demo.GraphQL.IContact_informationQuery contact_Information)
        {
            _contact_Information = contact_Information ?? throw new global::System.ArgumentNullException(nameof(contact_Information));
        }

        public static global::System.String ClientName => "CitroneerGraphQlClient";
        public global::Demo.GraphQL.IContact_informationQuery Contact_information => _contact_Information;
    }

    /// <summary>
    /// Represents the CitroneerGraphQlClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial interface ICitroneerGraphQlClient
    {
        global::Demo.GraphQL.IContact_informationQuery Contact_information { get; }
    }
}

namespace Demo.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ContactEntity
    {
        public ContactEntity(global::System.String? contactId = default !, global::System.String? name = default !, global::StrawberryShake.EntityId? taxCountry = default !, global::StrawberryShake.EntityId? juridical = default !, global::StrawberryShake.EntityId? classification = default !, global::StrawberryShake.EntityId? identity = default !, global::System.String? type = default !, global::StrawberryShake.EntityId? profile = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? portfolios = default !)
        {
            ContactId = contactId;
            Name = name;
            TaxCountry = taxCountry;
            Juridical = juridical;
            Classification = classification;
            Identity = identity;
            Type = type;
            Profile = profile;
            Portfolios = portfolios;
        }

        public global::System.String? ContactId { get; }

        public global::System.String? Name { get; }

        public global::StrawberryShake.EntityId? TaxCountry { get; }

        public global::StrawberryShake.EntityId? Juridical { get; }

        public global::StrawberryShake.EntityId? Classification { get; }

        public global::StrawberryShake.EntityId? Identity { get; }

        public global::System.String? Type { get; }

        public global::StrawberryShake.EntityId? Profile { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Portfolios { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CountryEntity
    {
        public CountryEntity(global::System.String? name = default !)
        {
            Name = name;
        }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class JuridicalEntity
    {
        public JuridicalEntity(global::System.String? name = default !)
        {
            Name = name;
        }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ClassificationEntity
    {
        public ClassificationEntity(global::System.String? name = default !)
        {
            Name = name;
        }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class IdentityEntity
    {
        public IdentityEntity(global::System.String? name = default !)
        {
            Name = name;
        }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Profile2Entity
    {
        public Profile2Entity(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? attributes = default !)
        {
            Attributes = attributes;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Attributes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PortfolioEntity
    {
        public PortfolioEntity(global::System.Int64? id = default !, global::System.String? name = default !, global::System.String? shortName = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? accounts = default !, global::StrawberryShake.EntityId? portfolioReport = default !)
        {
            Id = id;
            Name = name;
            ShortName = shortName;
            Accounts = accounts;
            PortfolioReport = portfolioReport;
        }

        public global::System.Int64? Id { get; }

        public global::System.String? Name { get; }

        public global::System.String? ShortName { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Accounts { get; }

        public global::StrawberryShake.EntityId? PortfolioReport { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class ProfileAttribute2Entity
    {
        public ProfileAttribute2Entity(global::System.String? attributeKey = default !, global::System.Int64? id = default !, global::System.String? stringValue = default !)
        {
            AttributeKey = attributeKey;
            Id = id;
            StringValue = stringValue;
        }

        public global::System.String? AttributeKey { get; }

        public global::System.Int64? Id { get; }

        public global::System.String? StringValue { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class AccountEntity
    {
        public AccountEntity(global::System.String? name = default !, global::StrawberryShake.EntityId? currency = default !, global::System.String? bic = default !)
        {
            Name = name;
            Currency = currency;
            Bic = bic;
        }

        public global::System.String? Name { get; }

        public global::StrawberryShake.EntityId? Currency { get; }

        public global::System.String? Bic { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PortfolioReportEntity
    {
        public PortfolioReportEntity(global::System.Double accountBalance = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? portfolioReportItems = default !)
        {
            AccountBalance = accountBalance;
            PortfolioReportItems = portfolioReportItems;
        }

        public global::System.Double AccountBalance { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? PortfolioReportItems { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class SecurityEntity
    {
        public SecurityEntity(global::System.String? name = default !)
        {
            Name = name;
        }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class PortfolioReportItemEntity
    {
        public PortfolioReportItemEntity(global::System.String? securityName = default !, global::System.Double exposure = default !, global::System.Double marketValue = default !, global::System.Double amount = default !, global::System.Double valueChangeRelative = default !)
        {
            SecurityName = securityName;
            Exposure = exposure;
            MarketValue = marketValue;
            Amount = amount;
            ValueChangeRelative = valueChangeRelative;
        }

        public global::System.String? SecurityName { get; }

        public global::System.Double Exposure { get; }

        public global::System.Double MarketValue { get; }

        public global::System.Double Amount { get; }

        public global::System.Double ValueChangeRelative { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_informationResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Demo.GraphQL.Contact_informationResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ContactEntity, Contact_information_Contacts_Contact> _contact_Information_Contacts_ContactFromContactEntityMapper;
        public Contact_informationResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ContactEntity, Contact_information_Contacts_Contact> contact_Information_Contacts_ContactFromContactEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _contact_Information_Contacts_ContactFromContactEntityMapper = contact_Information_Contacts_ContactFromContactEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_ContactFromContactEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Demo.GraphQL.IContact_informationResult);
        public Contact_informationResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is Contact_informationResultInfo info)
            {
                return new Contact_informationResult(MapIContact_information_ContactsArray(info.Contacts, snapshot));
            }

            throw new global::System.ArgumentException("Contact_informationResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts?>? MapIContact_information_ContactsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var contacts = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                contacts.Add(MapIContact_information_Contacts(child, snapshot));
            }

            return contacts;
        }

        private global::Demo.GraphQL.IContact_information_Contacts? MapIContact_information_Contacts(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Contact", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_ContactFromContactEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.ContactEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_informationResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public Contact_informationResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? contacts, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Contacts = contacts;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Contacts { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new Contact_informationResultInfo(Contacts, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_ContactFromContactEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ContactEntity, Contact_information_Contacts_Contact>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.CountryEntity, Contact_information_Contacts_TaxCountry_Country> _contact_Information_Contacts_TaxCountry_CountryFromCountryEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.JuridicalEntity, Contact_information_Contacts_Juridical_Juridical> _contact_Information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ClassificationEntity, Contact_information_Contacts_Classification_Classification> _contact_Information_Contacts_Classification_ClassificationFromClassificationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.IdentityEntity, Contact_information_Contacts_Identity_Identity> _contact_Information_Contacts_Identity_IdentityFromIdentityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.Profile2Entity, Contact_information_Contacts_Profile_Profile2> _contact_Information_Contacts_Profile_Profile2FromProfile2EntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ProfileAttribute2Entity, Contact_information_Contacts_Profile_Attributes_ProfileAttribute2> _contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioEntity, Contact_information_Contacts_Portfolios_Portfolio> _contact_Information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.AccountEntity, Contact_information_Contacts_Portfolios_Accounts_Account> _contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.SecurityEntity, Contact_information_Contacts_Portfolios_Accounts_Currency_Security> _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport> _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportItemEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem> _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper;
        public Contact_information_Contacts_ContactFromContactEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.CountryEntity, Contact_information_Contacts_TaxCountry_Country> contact_Information_Contacts_TaxCountry_CountryFromCountryEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.JuridicalEntity, Contact_information_Contacts_Juridical_Juridical> contact_Information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ClassificationEntity, Contact_information_Contacts_Classification_Classification> contact_Information_Contacts_Classification_ClassificationFromClassificationEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.IdentityEntity, Contact_information_Contacts_Identity_Identity> contact_Information_Contacts_Identity_IdentityFromIdentityEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.Profile2Entity, Contact_information_Contacts_Profile_Profile2> contact_Information_Contacts_Profile_Profile2FromProfile2EntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ProfileAttribute2Entity, Contact_information_Contacts_Profile_Attributes_ProfileAttribute2> contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioEntity, Contact_information_Contacts_Portfolios_Portfolio> contact_Information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.AccountEntity, Contact_information_Contacts_Portfolios_Accounts_Account> contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.SecurityEntity, Contact_information_Contacts_Portfolios_Accounts_Currency_Security> contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport> contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportItemEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem> contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _contact_Information_Contacts_TaxCountry_CountryFromCountryEntityMapper = contact_Information_Contacts_TaxCountry_CountryFromCountryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_TaxCountry_CountryFromCountryEntityMapper));
            _contact_Information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper = contact_Information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper));
            _contact_Information_Contacts_Classification_ClassificationFromClassificationEntityMapper = contact_Information_Contacts_Classification_ClassificationFromClassificationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Classification_ClassificationFromClassificationEntityMapper));
            _contact_Information_Contacts_Identity_IdentityFromIdentityEntityMapper = contact_Information_Contacts_Identity_IdentityFromIdentityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Identity_IdentityFromIdentityEntityMapper));
            _contact_Information_Contacts_Profile_Profile2FromProfile2EntityMapper = contact_Information_Contacts_Profile_Profile2FromProfile2EntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Profile_Profile2FromProfile2EntityMapper));
            _contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper = contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper));
            _contact_Information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper = contact_Information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper));
            _contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper = contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper));
            _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper = contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper));
            _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper = contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper));
            _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper = contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper));
        }

        public Contact_information_Contacts_Contact Map(global::Demo.GraphQL.State.ContactEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Contact(entity.ContactId, entity.Name, MapIContact_information_Contacts_TaxCountry(entity.TaxCountry, snapshot), MapIContact_information_Contacts_Juridical(entity.Juridical, snapshot), MapIContact_information_Contacts_Classification(entity.Classification, snapshot), MapIContact_information_Contacts_Identity(entity.Identity, snapshot), entity.Type, MapIContact_information_Contacts_Profile(entity.Profile, snapshot), MapIContact_information_Contacts_PortfoliosArray(entity.Portfolios, snapshot));
        }

        private global::Demo.GraphQL.IContact_information_Contacts_TaxCountry? MapIContact_information_Contacts_TaxCountry(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Country", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_TaxCountry_CountryFromCountryEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.CountryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Juridical? MapIContact_information_Contacts_Juridical(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Juridical", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.JuridicalEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Classification? MapIContact_information_Contacts_Classification(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Classification", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Classification_ClassificationFromClassificationEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.ClassificationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Identity? MapIContact_information_Contacts_Identity(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Identity", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Identity_IdentityFromIdentityEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.IdentityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Profile? MapIContact_information_Contacts_Profile(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Profile2", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Profile_Profile2FromProfile2EntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.Profile2Entity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes?>? MapIContact_information_Contacts_Profile_AttributesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var profileAttribute2s = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                profileAttribute2s.Add(MapIContact_information_Contacts_Profile_Attributes(child, snapshot));
            }

            return profileAttribute2s;
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes? MapIContact_information_Contacts_Profile_Attributes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ProfileAttribute2", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.ProfileAttribute2Entity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios?>? MapIContact_information_Contacts_PortfoliosArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var portfolios = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts_Portfolios?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                portfolios.Add(MapIContact_information_Contacts_Portfolios(child, snapshot));
            }

            return portfolios;
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios? MapIContact_information_Contacts_Portfolios(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Portfolio", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.PortfolioEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts?>? MapIContact_information_Contacts_Portfolios_AccountsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var accounts = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                accounts.Add(MapIContact_information_Contacts_Portfolios_Accounts(child, snapshot));
            }

            return accounts;
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts? MapIContact_information_Contacts_Portfolios_Accounts(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Account", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.AccountEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts_Currency? MapIContact_information_Contacts_Portfolios_Accounts_Currency(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Security", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.SecurityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport? MapIContact_information_Contacts_Portfolios_PortfolioReport(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PortfolioReport", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.PortfolioReportEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>? MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var portfolioReportItems = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                portfolioReportItems.Add(MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems(child, snapshot));
            }

            return portfolioReportItems;
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems? MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PortfolioReportItem", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.PortfolioReportItemEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_TaxCountry_CountryFromCountryEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.CountryEntity, Contact_information_Contacts_TaxCountry_Country>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Contact_information_Contacts_TaxCountry_CountryFromCountryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Contact_information_Contacts_TaxCountry_Country Map(global::Demo.GraphQL.State.CountryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_TaxCountry_Country(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.JuridicalEntity, Contact_information_Contacts_Juridical_Juridical>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Contact_information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Contact_information_Contacts_Juridical_Juridical Map(global::Demo.GraphQL.State.JuridicalEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Juridical_Juridical(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Classification_ClassificationFromClassificationEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ClassificationEntity, Contact_information_Contacts_Classification_Classification>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Contact_information_Contacts_Classification_ClassificationFromClassificationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Contact_information_Contacts_Classification_Classification Map(global::Demo.GraphQL.State.ClassificationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Classification_Classification(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Identity_IdentityFromIdentityEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.IdentityEntity, Contact_information_Contacts_Identity_Identity>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Contact_information_Contacts_Identity_IdentityFromIdentityEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Contact_information_Contacts_Identity_Identity Map(global::Demo.GraphQL.State.IdentityEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Identity_Identity(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Profile_Profile2FromProfile2EntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.Profile2Entity, Contact_information_Contacts_Profile_Profile2>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ProfileAttribute2Entity, Contact_information_Contacts_Profile_Attributes_ProfileAttribute2> _contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper;
        public Contact_information_Contacts_Profile_Profile2FromProfile2EntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ProfileAttribute2Entity, Contact_information_Contacts_Profile_Attributes_ProfileAttribute2> contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper = contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper));
        }

        public Contact_information_Contacts_Profile_Profile2 Map(global::Demo.GraphQL.State.Profile2Entity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Profile_Profile2(MapIContact_information_Contacts_Profile_AttributesArray(entity.Attributes, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes?>? MapIContact_information_Contacts_Profile_AttributesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var profileAttribute2s = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                profileAttribute2s.Add(MapIContact_information_Contacts_Profile_Attributes(child, snapshot));
            }

            return profileAttribute2s;
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Profile_Attributes? MapIContact_information_Contacts_Profile_Attributes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ProfileAttribute2", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.ProfileAttribute2Entity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioEntity, Contact_information_Contacts_Portfolios_Portfolio>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.AccountEntity, Contact_information_Contacts_Portfolios_Accounts_Account> _contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.SecurityEntity, Contact_information_Contacts_Portfolios_Accounts_Currency_Security> _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport> _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportItemEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem> _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper;
        public Contact_information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.AccountEntity, Contact_information_Contacts_Portfolios_Accounts_Account> contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.SecurityEntity, Contact_information_Contacts_Portfolios_Accounts_Currency_Security> contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport> contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportItemEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem> contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper = contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper));
            _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper = contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper));
            _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper = contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper));
            _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper = contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper));
        }

        public Contact_information_Contacts_Portfolios_Portfolio Map(global::Demo.GraphQL.State.PortfolioEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Portfolios_Portfolio(entity.Id, entity.Name, entity.ShortName, MapIContact_information_Contacts_Portfolios_AccountsArray(entity.Accounts, snapshot), MapIContact_information_Contacts_Portfolios_PortfolioReport(entity.PortfolioReport, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts?>? MapIContact_information_Contacts_Portfolios_AccountsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var accounts = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                accounts.Add(MapIContact_information_Contacts_Portfolios_Accounts(child, snapshot));
            }

            return accounts;
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts? MapIContact_information_Contacts_Portfolios_Accounts(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Account", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.AccountEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts_Currency? MapIContact_information_Contacts_Portfolios_Accounts_Currency(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Security", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.SecurityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport? MapIContact_information_Contacts_Portfolios_PortfolioReport(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PortfolioReport", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.PortfolioReportEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>? MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var portfolioReportItems = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                portfolioReportItems.Add(MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems(child, snapshot));
            }

            return portfolioReportItems;
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems? MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PortfolioReportItem", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.PortfolioReportItemEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ProfileAttribute2Entity, Contact_information_Contacts_Profile_Attributes_ProfileAttribute2>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Contact_information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Contact_information_Contacts_Profile_Attributes_ProfileAttribute2 Map(global::Demo.GraphQL.State.ProfileAttribute2Entity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Profile_Attributes_ProfileAttribute2(entity.AttributeKey, entity.Id, entity.StringValue);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.AccountEntity, Contact_information_Contacts_Portfolios_Accounts_Account>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.SecurityEntity, Contact_information_Contacts_Portfolios_Accounts_Currency_Security> _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper;
        public Contact_information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.SecurityEntity, Contact_information_Contacts_Portfolios_Accounts_Currency_Security> contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper = contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper));
        }

        public Contact_information_Contacts_Portfolios_Accounts_Account Map(global::Demo.GraphQL.State.AccountEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Portfolios_Accounts_Account(entity.Name, MapIContact_information_Contacts_Portfolios_Accounts_Currency(entity.Currency, snapshot), entity.Bic);
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_Accounts_Currency? MapIContact_information_Contacts_Portfolios_Accounts_Currency(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Security", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.SecurityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportItemEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem> _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper;
        public Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportItemEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem> contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper = contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper ?? throw new global::System.ArgumentNullException(nameof(contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper));
        }

        public Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport Map(global::Demo.GraphQL.State.PortfolioReportEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport(entity.AccountBalance, MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsArray(entity.PortfolioReportItems, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>? MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var portfolioReportItems = new global::System.Collections.Generic.List<global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                portfolioReportItems.Add(MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems(child, snapshot));
            }

            return portfolioReportItems;
        }

        private global::Demo.GraphQL.IContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems? MapIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PortfolioReportItem", global::System.StringComparison.Ordinal))
            {
                return _contact_Information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper.Map(snapshot.GetEntity<global::Demo.GraphQL.State.PortfolioReportItemEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.SecurityEntity, Contact_information_Contacts_Portfolios_Accounts_Currency_Security>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Contact_information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Contact_information_Contacts_Portfolios_Accounts_Currency_Security Map(global::Demo.GraphQL.State.SecurityEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Portfolios_Accounts_Currency_Security(entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper : global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportItemEntity, Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem Map(global::Demo.GraphQL.State.PortfolioReportItemEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem(entity.SecurityName, entity.Exposure, entity.MarketValue, entity.Amount, entity.ValueChangeRelative);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class Contact_informationBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.GraphQL.IContact_informationResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Demo.GraphQL.IContact_informationResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public Contact_informationBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Demo.GraphQL.IContact_informationResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IContact_informationResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IContact_informationResult Result, Contact_informationResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IContact_informationResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IContact_informationResult, Contact_informationResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? contactsId = default !;
            _entityStore.Update(session =>
            {
                contactsId = UpdateIContact_information_ContactsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "contacts"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new Contact_informationResultInfo(contactsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIContact_information_ContactsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var contacts = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                contacts.Add(UpdateIContact_information_ContactsEntity(session, child, entityIds));
            }

            return contacts;
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_ContactsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Contact", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.ContactEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.ContactEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "contactId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateIContact_information_Contacts_TaxCountryEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "taxCountry"), entityIds), UpdateIContact_information_Contacts_JuridicalEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "juridical"), entityIds), UpdateIContact_information_Contacts_ClassificationEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "classification"), entityIds), UpdateIContact_information_Contacts_IdentityEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "identity"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), UpdateIContact_information_Contacts_ProfileEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "profile"), entityIds), UpdateIContact_information_Contacts_PortfoliosEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "portfolios"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.ContactEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "contactId")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateIContact_information_Contacts_TaxCountryEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "taxCountry"), entityIds), UpdateIContact_information_Contacts_JuridicalEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "juridical"), entityIds), UpdateIContact_information_Contacts_ClassificationEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "classification"), entityIds), UpdateIContact_information_Contacts_IdentityEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "identity"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "type")), UpdateIContact_information_Contacts_ProfileEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "profile"), entityIds), UpdateIContact_information_Contacts_PortfoliosEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "portfolios"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_TaxCountryEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Country", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.CountryEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.CountryEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.CountryEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_JuridicalEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Juridical", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.JuridicalEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.JuridicalEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.JuridicalEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_ClassificationEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Classification", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.ClassificationEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.ClassificationEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.ClassificationEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_IdentityEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Identity", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.IdentityEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.IdentityEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.IdentityEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_ProfileEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Profile2", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.Profile2Entity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.Profile2Entity(UpdateIContact_information_Contacts_Profile_AttributesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributes"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.Profile2Entity(UpdateIContact_information_Contacts_Profile_AttributesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributes"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIContact_information_Contacts_Profile_AttributesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var profileAttribute2s = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                profileAttribute2s.Add(UpdateIContact_information_Contacts_Profile_AttributesEntity(session, child, entityIds));
            }

            return profileAttribute2s;
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_Profile_AttributesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ProfileAttribute2", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.ProfileAttribute2Entity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.ProfileAttribute2Entity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributeKey")), DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stringValue"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.ProfileAttribute2Entity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributeKey")), DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stringValue"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64? DeserializeInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIContact_information_Contacts_PortfoliosEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var portfolios = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                portfolios.Add(UpdateIContact_information_Contacts_PortfoliosEntity(session, child, entityIds));
            }

            return portfolios;
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_PortfoliosEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Portfolio", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.PortfolioEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.PortfolioEntity(DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shortName")), UpdateIContact_information_Contacts_Portfolios_AccountsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accounts"), entityIds), UpdateIContact_information_Contacts_Portfolios_PortfolioReportEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "portfolioReport"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.PortfolioEntity(DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shortName")), UpdateIContact_information_Contacts_Portfolios_AccountsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accounts"), entityIds), UpdateIContact_information_Contacts_Portfolios_PortfolioReportEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "portfolioReport"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIContact_information_Contacts_Portfolios_AccountsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var accounts = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                accounts.Add(UpdateIContact_information_Contacts_Portfolios_AccountsEntity(session, child, entityIds));
            }

            return accounts;
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_Portfolios_AccountsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Account", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.AccountEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.AccountEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateIContact_information_Contacts_Portfolios_Accounts_CurrencyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currency"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bic"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.AccountEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateIContact_information_Contacts_Portfolios_Accounts_CurrencyEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currency"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bic"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_Portfolios_Accounts_CurrencyEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Security", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.SecurityEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.SecurityEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.SecurityEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_Portfolios_PortfolioReportEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PortfolioReport", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.PortfolioReportEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.PortfolioReportEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountBalance")), UpdateIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "portfolioReportItems"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.PortfolioReportEntity(DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountBalance")), UpdateIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "portfolioReportItems"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double DeserializeNonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var portfolioReportItems = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                portfolioReportItems.Add(UpdateIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsEntity(session, child, entityIds));
            }

            return portfolioReportItems;
        }

        private global::StrawberryShake.EntityId? UpdateIContact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItemsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PortfolioReportItem", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Demo.GraphQL.State.PortfolioReportItemEntity? entity))
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.PortfolioReportItemEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "securityName")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "exposure")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "marketValue")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueChangeRelative"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Demo.GraphQL.State.PortfolioReportItemEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "securityName")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "exposure")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "marketValue")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), DeserializeNonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valueChangeRelative"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CitroneerGraphQlClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Contact" => ParseContactEntityId(obj, __typename),
                "Country" => ParseCountryEntityId(obj, __typename),
                "Juridical" => ParseJuridicalEntityId(obj, __typename),
                "Classification" => ParseClassificationEntityId(obj, __typename),
                "Identity" => ParseIdentityEntityId(obj, __typename),
                "Profile2" => ParseProfile2EntityId(obj, __typename),
                "Portfolio" => ParsePortfolioEntityId(obj, __typename),
                "ProfileAttribute2" => ParseProfileAttribute2EntityId(obj, __typename),
                "Account" => ParseAccountEntityId(obj, __typename),
                "PortfolioReport" => ParsePortfolioReportEntityId(obj, __typename),
                "Security" => ParseSecurityEntityId(obj, __typename),
                "PortfolioReportItem" => ParsePortfolioReportItemEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Contact" => FormatContactEntityId(entityId),
                "Country" => FormatCountryEntityId(entityId),
                "Juridical" => FormatJuridicalEntityId(entityId),
                "Classification" => FormatClassificationEntityId(entityId),
                "Identity" => FormatIdentityEntityId(entityId),
                "Profile2" => FormatProfile2EntityId(entityId),
                "Portfolio" => FormatPortfolioEntityId(entityId),
                "ProfileAttribute2" => FormatProfileAttribute2EntityId(entityId),
                "Account" => FormatAccountEntityId(entityId),
                "PortfolioReport" => FormatPortfolioReportEntityId(entityId),
                "Security" => FormatSecurityEntityId(entityId),
                "PortfolioReportItem" => FormatPortfolioReportItemEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseContactEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatContactEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCountryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatCountryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseJuridicalEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatJuridicalEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseClassificationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatClassificationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseIdentityEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatIdentityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProfile2EntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatProfile2EntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePortfolioEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatPortfolioEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProfileAttribute2EntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatProfileAttribute2EntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAccountEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatAccountEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePortfolioReportEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatPortfolioReportEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSecurityEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatSecurityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePortfolioReportItemEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatPortfolioReportItemEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public partial class CitroneerGraphQlClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CitroneerGraphQlClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.7.0.0")]
    public static partial class CitroneerGraphQlClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Demo.GraphQL.State.CitroneerGraphQlClientStoreAccessor> AddCitroneerGraphQlClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Demo.GraphQL.State.CitroneerGraphQlClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.GraphQL.Contact_informationQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.GraphQL.CitroneerGraphQlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.GraphQL.ICitroneerGraphQlClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Demo.GraphQL.State.CitroneerGraphQlClientStoreAccessor>("CitroneerGraphQlClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CitroneerGraphQlClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ContactEntity, global::Demo.GraphQL.Contact_information_Contacts_Contact>, global::Demo.GraphQL.State.Contact_information_Contacts_ContactFromContactEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.CountryEntity, global::Demo.GraphQL.Contact_information_Contacts_TaxCountry_Country>, global::Demo.GraphQL.State.Contact_information_Contacts_TaxCountry_CountryFromCountryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.JuridicalEntity, global::Demo.GraphQL.Contact_information_Contacts_Juridical_Juridical>, global::Demo.GraphQL.State.Contact_information_Contacts_Juridical_JuridicalFromJuridicalEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ClassificationEntity, global::Demo.GraphQL.Contact_information_Contacts_Classification_Classification>, global::Demo.GraphQL.State.Contact_information_Contacts_Classification_ClassificationFromClassificationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.IdentityEntity, global::Demo.GraphQL.Contact_information_Contacts_Identity_Identity>, global::Demo.GraphQL.State.Contact_information_Contacts_Identity_IdentityFromIdentityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.Profile2Entity, global::Demo.GraphQL.Contact_information_Contacts_Profile_Profile2>, global::Demo.GraphQL.State.Contact_information_Contacts_Profile_Profile2FromProfile2EntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioEntity, global::Demo.GraphQL.Contact_information_Contacts_Portfolios_Portfolio>, global::Demo.GraphQL.State.Contact_information_Contacts_Portfolios_PortfolioFromPortfolioEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.ProfileAttribute2Entity, global::Demo.GraphQL.Contact_information_Contacts_Profile_Attributes_ProfileAttribute2>, global::Demo.GraphQL.State.Contact_information_Contacts_Profile_Attributes_ProfileAttribute2FromProfileAttribute2EntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.AccountEntity, global::Demo.GraphQL.Contact_information_Contacts_Portfolios_Accounts_Account>, global::Demo.GraphQL.State.Contact_information_Contacts_Portfolios_Accounts_AccountFromAccountEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportEntity, global::Demo.GraphQL.Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReport>, global::Demo.GraphQL.State.Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportFromPortfolioReportEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.SecurityEntity, global::Demo.GraphQL.Contact_information_Contacts_Portfolios_Accounts_Currency_Security>, global::Demo.GraphQL.State.Contact_information_Contacts_Portfolios_Accounts_Currency_SecurityFromSecurityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Demo.GraphQL.State.PortfolioReportItemEntity, global::Demo.GraphQL.Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItem>, global::Demo.GraphQL.State.Contact_information_Contacts_Portfolios_PortfolioReport_PortfolioReportItems_PortfolioReportItemFromPortfolioReportItemEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Demo.GraphQL.IContact_informationResult>, global::Demo.GraphQL.State.Contact_informationResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Demo.GraphQL.IContact_informationResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.GraphQL.IContact_informationQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.GraphQL.IContact_informationResult>, global::Demo.GraphQL.State.Contact_informationBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Demo.GraphQL.IContact_informationResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Demo.GraphQL.IContact_informationResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Demo.GraphQL.IContact_informationResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.GraphQL.Contact_informationQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.GraphQL.IContact_informationQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.GraphQL.Contact_informationQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Demo.GraphQL.State.CitroneerGraphQlClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.GraphQL.CitroneerGraphQlClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Demo.GraphQL.ICitroneerGraphQlClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Demo.GraphQL.CitroneerGraphQlClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
